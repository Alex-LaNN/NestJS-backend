version: '3.8'

services:
  nginx:
    container_name: nginx
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./certbot/certbot-etc:/etc/letsencrypt
      - ./certbot/certbot-var:/var/lib/letsencrypt
      - ./public:/var/www/html
    networks:
      - swapi_network
    depends_on:
      - app
    restart: always
    
  certbot:
    image: certbot/certbot
    container_name: certbot
    env_file:
      - .env.production
    volumes:
      - ./certbot/certbot-etc:/etc/letsencrypt
      - ./certbot/certbot-var:/var/lib/letsencrypt
      - ./public:/var/www/html
    entrypoint:
      - "/bin/sh"
      - "-c"
      - |
        if [ ! -f /etc/letsencrypt/live/${HOSTNAME}/fullchain.pem ]; then
          certbot certonly --webroot --webroot-path=/var/www/html --email $CERTBOT_EMAIL --agree-tos --no-eff-email -d ${HOSTNAME};
        else
          trap exit TERM;
          while :; do certbot renew; sleep 12h & wait $${!}; done;
        fi
    profiles:
      - production

  mysql:
    container_name: mysql
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASS}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASS}
    ports:
      - "${DB_PORT}:3306"
    volumes:
      - ./mysql/data:/var/lib/mysql
    networks:
      - swapi_network
    restart: always

  app:
    container_name: app
    build:
      context: .
      dockerfile: Dockerfile
    working_dir: /usr/src/app
    volumes:
      - ./:/usr/src/app
      - /usr/src/app/node_modules  # To avoid overwriting the folder with installed dependencies
    environment:
      - APP_COMMAND=${APP_COMMAND}
    ports:
      - "${APP_PORT}:${APP_PORT}"
    networks:
      - swapi_network
    depends_on:
      - mysql
    restart: always

networks:
  swapi_network:
    driver: bridge